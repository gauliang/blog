<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>esm on Gauliang</title>
    <link>https://gauliang.github.io/tags/esm/</link>
    <description>Recent content in esm on Gauliang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 07 Sep 2020 17:14:01 +0800</lastBuildDate>
    
	<atom:link href="https://gauliang.github.io/tags/esm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ECMAScript Modules</title>
      <link>https://gauliang.github.io/blog/2020/es-modules/</link>
      <pubDate>Mon, 07 Sep 2020 17:14:01 +0800</pubDate>
      
      <guid>https://gauliang.github.io/blog/2020/es-modules/</guid>
      <description>ES6 中首次内置了对模块的支持。从理论上讲，ECMAScript 模块应该在所有 JavaScript 环境中通用。实际上，浏览器仍然是ES模块的主要目标。 默认情况下，模块具有严格模式。
一、export 语法  可以在实体前使用 export 关键字实现导出，也可以通过 export 语句导出； 每个模块中可以有 0 各或者多个具名导出; 每个模块最多可以具有 1 个默认导出，常用于只有一个函数或类的模块； 在 export 子句中，可以通过 as 语法重命名导出； 一个模块可以同时包含具名导出和默认导出，但是通常最好每个模块都采用一种导出样式； 未导出的部分，是模块专有的，不能被外部访问。  1 2 3 4 5 6 7 8 9 10 11 12  // 具名导出 export function func() {} export const number = 1; export {f as foo, bar}; // 默认导出 export default function func() {} export default 618; // 从另一个模块导出 export * from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Javascript 模块化概述</title>
      <link>https://gauliang.github.io/blog/2020/what-are-cjs-amd-umd-and-esm-in-javascript/</link>
      <pubDate>Sat, 05 Sep 2020 16:04:37 +0800</pubDate>
      
      <guid>https://gauliang.github.io/blog/2020/what-are-cjs-amd-umd-and-esm-in-javascript/</guid>
      <description>当我们提及模块化时，通常意味着是由一组高度分离的，不同的功能块存储在模块中组成的。 在可能的情况下，通过松散耦合消除依赖关系简化应用程序的可维护性。 本文概述集中流行的模块化规范，以便在不同应用场景中能够快速决策选型。
CommonJS CommonJS 是同步导入，主要用于服务器端，无法在浏览器中直接运行。 导入 CJS 时，它将为你提供导入对象的副本，不支持 Tree-shaking。 通过 require 和 exports 与模块系统交互。
1 2 3 4 5 6 7  //importing const doSomething = require(&amp;#39;./doSomething.js&amp;#39;); //exporting module.exports = function doSomething(n) { // do something }   AMD AMD 全称 Asynchronous Module Definition —— 异步模块定义，由 RequireJS 实现，可在浏览器直接使用，语法相对复杂。
1 2 3 4 5 6 7 8 9 10 11 12 13  define([&amp;#39;dep1&amp;#39;, &amp;#39;dep2&amp;#39;], function (dep1, dep2) { //Define the module value by returning a value.</description>
    </item>
    
  </channel>
</rss>